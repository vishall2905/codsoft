import random
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

def print_board(board):
    """ Print the Tic-Tac-Toe board """
    for i in range(3):
        print(" | ".join(board[i*3:(i+1)*3]))
        if i < 2:
            print("---------")
    print()

def is_winner(board, player):
    """ Check if the given player has won """
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  
        [0, 4, 8], [2, 4, 6]  
    ]
    for condition in win_conditions:
        if all(board[i] == player for i in condition):
            return True
    return False

def is_board_full(board):
    """ Check if the board is full (no empty spaces left) """
    return all(cell != EMPTY for cell in board)

def minimax(board, depth, is_maximizing_player, alpha, beta):
    """ Minimax algorithm with Alpha-Beta Pruning """
    if is_winner(board, PLAYER_X):
        return 10 - depth
    if is_winner(board, PLAYER_O):
        return depth - 10
    if is_board_full(board):
        return 0

    if is_maximizing_player:
        max_eval = -float('inf')
        for i in range(9):
            if board[i] == EMPTY:
                board[i] = PLAYER_X
                eval = minimax(board, depth + 1, False, alpha, beta)
                board[i] = EMPTY
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(9):
            if board[i] == EMPTY:
                board[i] = PLAYER_O
                eval = minimax(board, depth + 1, True, alpha, beta)
                board[i] = EMPTY
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

def best_move(board):
    """ Find the best move for the AI (Player X) """
    best_score = -float('inf')
    move = -1

    for i in range(9):
        if board[i] == EMPTY:
            board[i] = PLAYER_X
            score = minimax(board, 0, False, -float('inf'), float('inf'))
            board[i] = EMPTY
            if score > best_score:
                best_score = score
                move = i

    return move

def play_game():
    """ Main game function to play Tic-Tac-Toe """
    board = [EMPTY] * 9
    print_board(board)

    while True:
        
        move = int(input("Enter your move (1-9): ")) - 1
        if board[move] != EMPTY:
            print("Invalid move, try again.")
            continue
        board[move] = PLAYER_O
        print_board(board)

        if is_winner(board, PLAYER_O):
            print("You win!")
            break
        if is_board_full(board):
            print("It's a tie!")
            break

        
        print("AI is making a move...")
        ai_move = best_move(board)
        board[ai_move] = PLAYER_X
        print_board(board)

        if is_winner(board, PLAYER_X):
            print("AI wins!")
            break
        if is_board_full(board):
            print("It's a tie!")
            break

if __name__ == "__main__":
    play_game()


